using System.Text;
using DomainDrivenDesign.DiagramGenerators.Diagrams.UseCases;
using PlantUML.TextEncoder;

namespace DomainDrivenDesign.DiagramGenerators;

public class DocumentationGenerator
{
    private readonly DocumentationProvider _documentationProvider;
    private readonly DocumentationFormatter _documentationFormatter;

    public DocumentationGenerator(
        DocumentationProvider documentationProvider,
        DocumentationFormatter documentationFormatter)
    {
        _documentationProvider = documentationProvider;
        _documentationFormatter = documentationFormatter;
    }

    public string DocumentUseCase(Type useCaseType)
    {
        // todo: make dynamic
        var diagram = new UseCaseDiagram(_documentationProvider);
        
        diagram.AddUseCase(useCaseType);
        var useCase = diagram.UseCases.First();

        
        var sb = new StringBuilder();
        sb.AppendLine("# " + useCase.Title);
        sb.Append("<span style=\"color:gray\">");
        sb.Append("*This document was auto-generated by DomainDocumentation.*");
        sb.AppendLine("</span>");
        sb.AppendLine();
        sb.AppendLine();

        if (useCase.HasDocumentation)
        {
            sb.AppendLine(_documentationFormatter.Format(useCase.Documentation));
        }

        sb.AppendLine("## Use Case Diagram");
        string plantUmlDiagram = diagram.ToPlantUml();
        var encodedDiagram = PlantUmlTextEncoder.Encode(plantUmlDiagram);
        var diagramImageUrl = "https://www.plantuml.com/plantuml/svg/" + encodedDiagram;
        var imageLink = $"<a href=\"{diagramImageUrl}\"><img src=\"{diagramImageUrl}\"></a>";
        sb.AppendLine(imageLink);
        sb.AppendLine();

        if (diagram.Relations.Count > 0)
        {
            sb.AppendLine("## Actors");
            foreach (var relation in diagram.Relations)
            {
                var executor = relation.From;
                
                sb.AppendLine("### " + executor.Title);

                if (executor.HasDocumentation)
                {
                    sb.AppendLine(_documentationFormatter.Format(executor.Documentation));
                }

                if (relation.HasMotive)
                {
                    sb.AppendLine();
                    sb.AppendLine("**Reason for executing the use case:**");
                    sb.AppendLine();
                    sb.AppendLine($"\t{relation.Motivation!.Replace("\n", "\t")}");
                    sb.AppendLine();
                }
            }
        }

        return sb.ToString();
    }
}